// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../../../packages/inferno-component/inferno

declare module 'inferno-component' {
    /**
        * @module Inferno-Component
        */ /** TypeDoc Comment */
    import { Props, VNode } from "inferno";
    export interface ComponentLifecycle<P, S> {
            componentDidMount?(): void;
            componentWillMount?(): void;
            componentWillReceiveProps?(nextProps: P, nextContext: any): void;
            shouldComponentUpdate?(nextProps: P, nextState: S, nextContext: any): boolean;
            componentWillUpdate?(nextProps: P, nextState: S, nextContext: any): void;
            componentDidUpdate?(prevProps: P, prevState: S, prevContext: any): void;
            componentWillUnmount?(): void;
    }
    export default class Component<P, S> implements ComponentLifecycle<P, S> {
            static defaultProps: {};
            state: S | null;
            props: P & Props;
            context: any;
            _blockRender: boolean;
            _blockSetState: boolean;
            _pendingSetState: boolean;
            _pendingState: S | null;
            _lastInput: any;
            _vNode: VNode | null;
            _unmounted: boolean;
            _lifecycle: null;
            _childContext: null;
            _isSVG: boolean;
            _updating: boolean;
            constructor(props?: P, context?: any);
            componentDidMount?(): void;
            componentWillMount?(): void;
            componentWillReceiveProps?(nextProps: P, nextContext: any): void;
            shouldComponentUpdate?(nextProps: P, nextState: S, nextContext: any): boolean;
            componentWillUpdate?(nextProps: P, nextState: S, nextContext: any): void;
            componentDidUpdate?(prevProps: P, prevState: S, prevContext: any): void;
            componentWillUnmount?(): void;
            getChildContext?(): void;
            forceUpdate(callback?: Function): void;
            setState(newState: any, callback?: Function): void;
            setStateSync(newState: any): void;
            _updateComponent(prevState: S, nextState: S, prevProps: P & Props, nextProps: P & Props, context: any, force: boolean, fromSetState: boolean): VNode | string;
            render(nextProps?: P, nextState?: any, nextContext?: any): any;
    }
}

